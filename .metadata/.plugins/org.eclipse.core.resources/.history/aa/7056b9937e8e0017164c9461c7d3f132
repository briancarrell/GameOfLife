import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class GOLFrame extends JFrame {

	private JPanel contentPane;
	
	
	//main method
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					GOLFrame frame = new GOLFrame(6,8);
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		
		
	}
	
	
	
	//constructor creates frame with all panels and buttons on it
	public GOLFrame(int height, int width) {
		
		// set bounds of window and overall Panel
		setBounds(0,0,700,400);
		contentPane = new JPanel();
		setContentPane(contentPane);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//JPanel for the initial state grid
		JPanel initial = new JPanel();
        GridLayout gl =new GridLayout(width,height);
        initial.setLayout(gl);
        JLabel initialTitle = new JLabel ("Initial State");
        add(initialTitle);
		
        // creates a cell array to store data about each cell
        Cell[][] GOL = new Cell[width][height];
		for (int i=0; i<width; i++) {
			for (int j=0; j<height; j++) {
				GOL[i][j] = new Cell(i, j);
			}
		}
		
		// creates a button array to store the buttons within the panel
		JButton[][] board = new JButton[width][height]; 
        for (int i=0; i<width; i++) {
			for (int j=0; j<height; j++) {
				// Set display of button
				JButton button = new JButton("");
				button.setPreferredSize(new Dimension(35,35));
				button.setBackground(Color.white);
				button.setOpaque(true);
				button.setBorderPainted(false);
				
				//set click function of button
				int x = i;
				int y = j;
				button.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) { 
						GOL[x][y].setAlive();
						updateNumNeighbors();
						button.setBackground(GOL[x][y].color);
					  }
					
					// update adjacent cells' number of living neighbors
					private void updateNumNeighbors() {
						for (int row=x-1; row<=x+1; row++) {
							for (int column=y-1; column<=y+1; column++) {
								if (row>=0 && row<width && column>=0 && column<height) {
									if (row!=x || column!=y) {
										GOL[row][column].numNeighbors++;
									}
								}
							}
						}
						
					}
				});
				
				//add button to button array and initial grid
				board[i][j] = button;
				initial.add(button);
			}
        }
        
        //add initial grid to frame
		add(initial);
		
		
		// JPanel for the new state grid
		JPanel after = new JPanel();
        after.setLayout(gl);
        JLabel afterTitle = new JLabel ("New State");
        add(afterTitle);
        
        // create an array of cells
		Cell[][] GOLafter = new Cell[width][height];
		for (int i=0; i<width; i++) {
			for (int j=0; j<height; j++) {
				GOLafter[i][j] = new Cell(i, j);
			}
		}
		
		//create an array of buttons to display
		JButton[][] boardAfter = new JButton[width][height]; 
        for (int i=0; i<width; i++) {
			for (int j=0; j<height; j++) {
				JButton button = new JButton("");
				button.setPreferredSize(new Dimension(35,35));
				button.setBackground(Color.white);
				button.setOpaque(true);
				button.setBorderPainted(false);
				boardAfter[i][j] = button;
				after.add(button);
			}
        }
        
        //add after grid to frame
		add(after);
		
		// create button to advance the game from the initial state to the new state
		JButton advance = new JButton("Advance States");
		advance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				advance();
			}

			private void advance() {
				for (int i=0; i<width; i++) {
					for (int j=0; j<height; j++) {
						GOLafter[i][j].alive = GOL[i][j].nextGeneration();
						boardAfter[i][j].setBackground(GOL[i][j].color);
					}
				}
				
			}
		});
		
		// create button to reset both grids to empty
		JButton reset = new JButton("Reset");
		reset.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) { 
				reset();
			}

			private void reset() {
				for (int i=0; i<width; i++) {
					for (int j=0; j<height; j++) {
						GOL[i][j].alive = false;
						GOL[i][j].numNeighbors = 0;
						GOLafter[i][j].alive = false;
						board[i][j].setBackground(Color.white);
						boardAfter[i][j].setBackground(Color.white);
					}
				}
				
			}
		});
		
		//add advance and reset buttons to frame
		add(advance);
		add(reset);
		
		// Create and add instructions for game
		JLabel instructions = new JLabel ("Instructions: Click any square in the initial state grid to change its alive state. Advance displays the next state grid. Reset clears both grids.");
        add(instructions);
		
		
	}
	

}
