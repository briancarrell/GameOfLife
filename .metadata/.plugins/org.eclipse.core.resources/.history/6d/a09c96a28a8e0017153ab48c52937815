import static org.junit.Assert.*;

import javax.swing.JButton;

import org.junit.Test;

public class GOLFrameTest {

	// Methods being tested
	
	/*
	 * Checks the number of neighboring cells that need to be updated
	 * x and y represent the location of the cell being changed
	 * width and height represent the dimensions of the grid
	 */
	private int updateNumNeighbors(int x, int y, int width, int height) {
		int numNeighbors=0;
		for (int xPos=x-1; xPos<=x+1; xPos++) {
			for (int yPos=y-1; yPos<=y+1; yPos++) {
				if (xPos>=0 && xPos<width && yPos>=0 && yPos<height) {
					if (xPos!=x || yPos!=y) {
						numNeighbors++;
					}
				}
			}
		}
		return numNeighbors;
		
	}
	
	/*
	 * Tests to make sure 
	 */
	private void advance(Cell c, Cell n, JButton b) {
		n.alive = c.nextGeneration();
		b.setBackground(n.color);
	}
	
	
	//////////////////////////////////////////////////////////////////////////////////////////
	//Tests
	
	/*
	 * Tests the output of updateNumNeighbors
	 * If the grid is null, return 0
	 * If the grid is smaller than 1x2 or 2x1, return 1
	 * If the cell is in the corner of the grid, return 3
	 * If the cell is on the edge of the grid, return 5
	 * If the cell is in the middle of the grid, return 8
	 */
	@Test
	public void nullGridUpdateNeighborsTest () {
		assertEquals(0, updateNumNeighbors(0,0,0,0));
	}
	@Test
	public void smallGridUpdateNeighborsTest () {
		assertEquals(1, updateNumNeighbors(0,0,1,2));
	}
	
	@Test
	public void cornerUpdateNeighborsTest() {
		assertEquals(3, updateNumNeighbors(0,0,6,8));
	}
	
	@Test
	public void edgeUpdateNeighborsTest() {
		assertEquals(5, updateNumNeighbors(1,0,6,8));
	}
	
	@Test
	public void centerUpdateNeighborsTest() {
		assertEquals(8, updateNumNeighbors(4,4,6,8));
	}
	

}
